-- Automatically generated by SQLQueryTestSuite
-- !query
create temporary view t as select * from values 0, 1, 2 as t(id)
-- !query analysis
CreateViewCommand `t`, select * from values 0, 1, 2 as t(id), false, false, LocalTempView, true
   +- Project [id#x]
      +- SubqueryAlias t
         +- LocalRelation [id#x]


-- !query
create temporary view t2 as select * from values 0, 1 as t(id)
-- !query analysis
CreateViewCommand `t2`, select * from values 0, 1 as t(id), false, false, LocalTempView, true
   +- Project [id#x]
      +- SubqueryAlias t
         +- LocalRelation [id#x]


-- !query
WITH s AS (SELECT 1 FROM s) SELECT * FROM s
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "TABLE_OR_VIEW_NOT_FOUND",
  "sqlState" : "42P01",
  "messageParameters" : {
    "relationName" : "`s`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 26,
    "stopIndex" : 26,
    "fragment" : "s"
  } ]
}


-- !query
WITH r AS (SELECT (SELECT * FROM r))
SELECT * FROM r
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "TABLE_OR_VIEW_NOT_FOUND",
  "sqlState" : "42P01",
  "messageParameters" : {
    "relationName" : "`r`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 34,
    "stopIndex" : 34,
    "fragment" : "r"
  } ]
}


-- !query
WITH t AS (SELECT 1 FROM t) SELECT * FROM t
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t
:     +- Project [1 AS 1#x]
:        +- SubqueryAlias t
:           +- View (`t`, [id#x])
:              +- Project [cast(id#x as int) AS id#x]
:                 +- Project [id#x]
:                    +- SubqueryAlias t
:                       +- LocalRelation [id#x]
+- Project [1#x]
   +- SubqueryAlias t
      +- CTERelationRef xxxx, true, [1#x]


-- !query
WITH s1 AS (SELECT 1 FROM s2), s2 AS (SELECT 1 FROM s1) SELECT * FROM s1, s2
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "TABLE_OR_VIEW_NOT_FOUND",
  "sqlState" : "42P01",
  "messageParameters" : {
    "relationName" : "`s2`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 27,
    "stopIndex" : 28,
    "fragment" : "s2"
  } ]
}


-- !query
WITH t1 AS (SELECT * FROM t2), t2 AS (SELECT 2 FROM t1) SELECT * FROM t1 cross join t2
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t1
:     +- Project [id#x]
:        +- SubqueryAlias t2
:           +- View (`t2`, [id#x])
:              +- Project [cast(id#x as int) AS id#x]
:                 +- Project [id#x]
:                    +- SubqueryAlias t
:                       +- LocalRelation [id#x]
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t2
:     +- Project [2 AS 2#x]
:        +- SubqueryAlias t1
:           +- CTERelationRef xxxx, true, [id#x]
+- Project [id#x, 2#x]
   +- Join Cross
      :- SubqueryAlias t1
      :  +- CTERelationRef xxxx, true, [id#x]
      +- SubqueryAlias t2
         +- CTERelationRef xxxx, true, [2#x]


-- !query
WITH CTE1 AS (
  SELECT b.id AS id
  FROM   T2 a
         CROSS JOIN (SELECT id AS id FROM T2) b
)
SELECT t1.id AS c1,
       t2.id AS c2
FROM   CTE1 t1
       CROSS JOIN CTE1 t2
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias CTE1
:     +- Project [id#x AS id#x]
:        +- Join Cross
:           :- SubqueryAlias a
:           :  +- SubqueryAlias t2
:           :     +- View (`t2`, [id#x])
:           :        +- Project [cast(id#x as int) AS id#x]
:           :           +- Project [id#x]
:           :              +- SubqueryAlias t
:           :                 +- LocalRelation [id#x]
:           +- SubqueryAlias b
:              +- Project [id#x AS id#x]
:                 +- SubqueryAlias t2
:                    +- View (`t2`, [id#x])
:                       +- Project [cast(id#x as int) AS id#x]
:                          +- Project [id#x]
:                             +- SubqueryAlias t
:                                +- LocalRelation [id#x]
+- Project [id#x AS c1#x, id#x AS c2#x]
   +- Join Cross
      :- SubqueryAlias t1
      :  +- SubqueryAlias CTE1
      :     +- CTERelationRef xxxx, true, [id#x]
      +- SubqueryAlias t2
         +- SubqueryAlias CTE1
            +- CTERelationRef xxxx, true, [id#x]


-- !query
WITH t(x) AS (SELECT 1)
SELECT * FROM t WHERE x = 1
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t
:     +- Project [1#x AS x#x]
:        +- Project [1 AS 1#x]
:           +- OneRowRelation
+- Project [x#x]
   +- Filter (x#x = 1)
      +- SubqueryAlias t
         +- CTERelationRef xxxx, true, [x#x]


-- !query
WITH t(x, y) AS (SELECT 1, 2)
SELECT * FROM t WHERE x = 1 AND y = 2
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t
:     +- Project [1#x AS x#x, 2#x AS y#x]
:        +- Project [1 AS 1#x, 2 AS 2#x]
:           +- OneRowRelation
+- Project [x#x, y#x]
   +- Filter ((x#x = 1) AND (y#x = 2))
      +- SubqueryAlias t
         +- CTERelationRef xxxx, true, [x#x, y#x]


-- !query
WITH t(x, x) AS (SELECT 1, 2)
SELECT * FROM t
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t
:     +- Project [1#x AS x#x, 2#x AS x#x]
:        +- Project [1 AS 1#x, 2 AS 2#x]
:           +- OneRowRelation
+- Project [x#x, x#x]
   +- SubqueryAlias t
      +- CTERelationRef xxxx, true, [x#x, x#x]


-- !query
WITH t() AS (SELECT 1)
SELECT * FROM t
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "')'",
    "hint" : ""
  }
}


-- !query
WITH
  t(x) AS (SELECT 1),
  t(x) AS (SELECT 2)
SELECT * FROM t
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_0038",
  "messageParameters" : {
    "duplicateNames" : "'t'"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 63,
    "fragment" : "WITH\n  t(x) AS (SELECT 1),\n  t(x) AS (SELECT 2)\nSELECT * FROM t"
  } ]
}


-- !query
WITH t AS (SELECT 1 FROM non_existing_table)
SELECT 2
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "TABLE_OR_VIEW_NOT_FOUND",
  "sqlState" : "42P01",
  "messageParameters" : {
    "relationName" : "`non_existing_table`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 26,
    "stopIndex" : 43,
    "fragment" : "non_existing_table"
  } ]
}


-- !query
SELECT count(*) FROM (
  WITH q1(x) AS (SELECT random() FROM range(1, 5))
    SELECT * FROM q1
  UNION
    SELECT * FROM q1
) ss
-- !query analysis
[Analyzer test output redacted due to nondeterminism]


-- !query
WITH w1(c1) AS
 (WITH w2(c2) AS
  (WITH w3(c3) AS
   (WITH w4(c4) AS
    (WITH w5(c5) AS
     (WITH w6(c6) AS
      (WITH w7(c7) AS
       (WITH w8(c8) AS
        (SELECT 1)
        SELECT * FROM w8)
       SELECT * FROM w7)
      SELECT * FROM w6)
     SELECT * FROM w5)
    SELECT * FROM w4)
   SELECT * FROM w3)
  SELECT * FROM w2)
SELECT * FROM w1
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias w8
:     +- Project [1#x AS c8#x]
:        +- Project [1 AS 1#x]
:           +- OneRowRelation
:- CTERelationDef xxxx, false
:  +- SubqueryAlias w7
:     +- Project [c8#x AS c7#x]
:        +- Project [c8#x]
:           +- SubqueryAlias w8
:              +- CTERelationRef xxxx, true, [c8#x]
:- CTERelationDef xxxx, false
:  +- SubqueryAlias w6
:     +- Project [c7#x AS c6#x]
:        +- Project [c7#x]
:           +- SubqueryAlias w7
:              +- CTERelationRef xxxx, true, [c7#x]
:- CTERelationDef xxxx, false
:  +- SubqueryAlias w5
:     +- Project [c6#x AS c5#x]
:        +- Project [c6#x]
:           +- SubqueryAlias w6
:              +- CTERelationRef xxxx, true, [c6#x]
:- CTERelationDef xxxx, false
:  +- SubqueryAlias w4
:     +- Project [c5#x AS c4#x]
:        +- Project [c5#x]
:           +- SubqueryAlias w5
:              +- CTERelationRef xxxx, true, [c5#x]
:- CTERelationDef xxxx, false
:  +- SubqueryAlias w3
:     +- Project [c4#x AS c3#x]
:        +- Project [c4#x]
:           +- SubqueryAlias w4
:              +- CTERelationRef xxxx, true, [c4#x]
:- CTERelationDef xxxx, false
:  +- SubqueryAlias w2
:     +- Project [c3#x AS c2#x]
:        +- Project [c3#x]
:           +- SubqueryAlias w3
:              +- CTERelationRef xxxx, true, [c3#x]
:- CTERelationDef xxxx, false
:  +- SubqueryAlias w1
:     +- Project [c2#x AS c1#x]
:        +- Project [c2#x]
:           +- SubqueryAlias w2
:              +- CTERelationRef xxxx, true, [c2#x]
+- Project [c1#x]
   +- SubqueryAlias w1
      +- CTERelationRef xxxx, true, [c1#x]


-- !query
SELECT ( WITH cte(foo) AS ( VALUES(id) )
         SELECT (SELECT foo FROM cte) )
FROM t
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_2304",
  "messageParameters" : {
    "sqlExpr" : "outer(t.id)"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 36,
    "stopIndex" : 37,
    "fragment" : "id"
  } ]
}


-- !query
WITH same_name AS (SELECT 42)
SELECT * FROM same_name, (SELECT 10) AS same_name
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias same_name
:     +- Project [42 AS 42#x]
:        +- OneRowRelation
+- Project [42#x, 10#x]
   +- Join Inner
      :- SubqueryAlias same_name
      :  +- CTERelationRef xxxx, true, [42#x]
      +- SubqueryAlias same_name
         +- Project [10 AS 10#x]
            +- OneRowRelation


-- !query
WITH same_name(x) AS (SELECT 42)
SELECT same_name.x FROM (SELECT 10) AS same_name(x), same_name
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "AMBIGUOUS_REFERENCE",
  "sqlState" : "42704",
  "messageParameters" : {
    "name" : "`same_name`.`x`",
    "referenceNames" : "[`same_name`.`x`, `same_name`.`x`]"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 41,
    "stopIndex" : 51,
    "fragment" : "same_name.x"
  } ]
}


-- !query
WITH q AS (SELECT 'foo' AS x)
SELECT x, typeof(x) FROM q
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias q
:     +- Project [foo AS x#x]
:        +- OneRowRelation
+- Project [x#x, typeof(x#x) AS typeof(x)#x]
   +- SubqueryAlias q
      +- CTERelationRef xxxx, true, [x#x]


-- !query
with cte as (select id as id_alias from t)
select id from cte
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`id`",
    "proposal" : "`cte`.`id_alias`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 51,
    "stopIndex" : 52,
    "fragment" : "id"
  } ]
}


-- !query
with r1 as (select * from r2),
     r2 as (select 1)
select 2
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "TABLE_OR_VIEW_NOT_FOUND",
  "sqlState" : "42P01",
  "messageParameters" : {
    "relationName" : "`r2`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 27,
    "stopIndex" : 28,
    "fragment" : "r2"
  } ]
}


-- !query
SELECT * FROM
  (WITH q AS (select 1 x) SELECT x+1 AS y FROM q)
-- !query analysis
Project [y#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- WithCTE
      :- CTERelationDef xxxx, false
      :  +- SubqueryAlias q
      :     +- Project [1 AS x#x]
      :        +- OneRowRelation
      +- Project [(x#x + 1) AS y#x]
         +- SubqueryAlias q
            +- CTERelationRef xxxx, true, [x#x]


-- !query
select (with q as (select 1 x) select * from q)
-- !query analysis
Project [scalar-subquery#x [] AS scalarsubquery()#x]
:  +- WithCTE
:     :- CTERelationDef xxxx, false
:     :  +- SubqueryAlias q
:     :     +- Project [1 AS x#x]
:     :        +- OneRowRelation
:     +- Project [x#x]
:        +- SubqueryAlias q
:           +- CTERelationRef xxxx, true, [x#x]
+- OneRowRelation


-- !query
select 1 in (with q as (select 1) select * from q)
-- !query analysis
Project [1 IN (list#x []) AS (1 IN (listquery()))#x]
:  +- WithCTE
:     :- CTERelationDef xxxx, false
:     :  +- SubqueryAlias q
:     :     +- Project [1 AS 1#x]
:     :        +- OneRowRelation
:     +- Project [1#x]
:        +- SubqueryAlias q
:           +- CTERelationRef xxxx, true, [1#x]
+- OneRowRelation


-- !query
SELECT * FROM
  (WITH q AS (select 1 x) SELECT x+1 AS y FROM q),
  q
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "TABLE_OR_VIEW_NOT_FOUND",
  "sqlState" : "42P01",
  "messageParameters" : {
    "relationName" : "`q`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 68,
    "stopIndex" : 68,
    "fragment" : "q"
  } ]
}


-- !query
WITH T1 as (select 1 a)
select *
from
  T1 x,
  (WITH T1 as (select 2 b) select * from T1) y,
  T1 z
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias T1
:     +- Project [1 AS a#x]
:        +- OneRowRelation
:- CTERelationDef xxxx, false
:  +- SubqueryAlias T1
:     +- Project [2 AS b#x]
:        +- OneRowRelation
+- Project [a#x, b#x, a#x]
   +- Join Inner
      :- Join Inner
      :  :- SubqueryAlias x
      :  :  +- SubqueryAlias T1
      :  :     +- CTERelationRef xxxx, true, [a#x]
      :  +- SubqueryAlias y
      :     +- Project [b#x]
      :        +- SubqueryAlias T1
      :           +- CTERelationRef xxxx, true, [b#x]
      +- SubqueryAlias z
         +- SubqueryAlias T1
            +- CTERelationRef xxxx, true, [a#x]


-- !query
WITH TTtt as (select 1 a),
     `tTTt_2` as (select 2 a)
select *
from
  (WITH TtTt as (select 3 c) select * from ttTT, `tttT_2`)
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias TTtt
:     +- Project [1 AS a#x]
:        +- OneRowRelation
:- CTERelationDef xxxx, false
:  +- SubqueryAlias tTTt_2
:     +- Project [2 AS a#x]
:        +- OneRowRelation
:- CTERelationDef xxxx, false
:  +- SubqueryAlias TtTt
:     +- Project [3 AS c#x]
:        +- OneRowRelation
+- Project [c#x, a#x]
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [c#x, a#x]
         +- Join Inner
            :- SubqueryAlias ttTT
            :  +- CTERelationRef xxxx, true, [c#x]
            +- SubqueryAlias tttT_2
               +- CTERelationRef xxxx, true, [a#x]


-- !query
select
  (WITH q AS (select T.x) select * from q)
from (select 1 x, 2 y) T
-- !query analysis
Project [scalar-subquery#x [x#x] AS scalarsubquery(x)#x]
:  +- WithCTE
:     :- CTERelationDef xxxx, false
:     :  +- SubqueryAlias q
:     :     +- Project [outer(x#x)]
:     :        +- OneRowRelation
:     +- Project [x#x]
:        +- SubqueryAlias q
:           +- CTERelationRef xxxx, true, [x#x]
+- SubqueryAlias T
   +- Project [1 AS x#x, 2 AS y#x]
      +- OneRowRelation


-- !query
select
  (WITH q AS (select 3 z) select x + t.y + z from q)
from (select 1 x, 2 y) T
-- !query analysis
Project [scalar-subquery#x [x#x && y#x] AS scalarsubquery(x, y)#x]
:  +- WithCTE
:     :- CTERelationDef xxxx, false
:     :  +- SubqueryAlias q
:     :     +- Project [3 AS z#x]
:     :        +- OneRowRelation
:     +- Project [((outer(x#x) + outer(y#x)) + z#x) AS ((outer(T.x) + outer(T.y)) + z)#x]
:        +- SubqueryAlias q
:           +- CTERelationRef xxxx, true, [z#x]
+- SubqueryAlias T
   +- Project [1 AS x#x, 2 AS y#x]
      +- OneRowRelation


-- !query
WITH q1 as (select 1 x)
select * from
  (with q2 as (select * from q1) select * from q2)
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias q1
:     +- Project [1 AS x#x]
:        +- OneRowRelation
:- CTERelationDef xxxx, false
:  +- SubqueryAlias q2
:     +- Project [x#x]
:        +- SubqueryAlias q1
:           +- CTERelationRef xxxx, true, [x#x]
+- Project [x#x]
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [x#x]
         +- SubqueryAlias q2
            +- CTERelationRef xxxx, true, [x#x]


-- !query
WITH q1 as (select 1 x)
select * from
  (with q1 as (select x+1 from q1) select * from q1)
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias q1
:     +- Project [1 AS x#x]
:        +- OneRowRelation
:- CTERelationDef xxxx, false
:  +- SubqueryAlias q1
:     +- Project [(x#x + 1) AS (x + 1)#x]
:        +- SubqueryAlias q1
:           +- CTERelationRef xxxx, true, [x#x]
+- Project [(x + 1)#x]
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [(x + 1)#x]
         +- SubqueryAlias q1
            +- CTERelationRef xxxx, true, [(x + 1)#x]


-- !query
with cte1 as (select 42), cte1 as (select 42) select * FROM cte1
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_0038",
  "messageParameters" : {
    "duplicateNames" : "'cte1'"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 64,
    "fragment" : "with cte1 as (select 42), cte1 as (select 42) select * FROM cte1"
  } ]
}


-- !query
with cte1 as (Select id as j from t)
select * from cte1 where j = (select max(j) from cte1 as cte2)
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias cte1
:     +- Project [id#x AS j#x]
:        +- SubqueryAlias t
:           +- View (`t`, [id#x])
:              +- Project [cast(id#x as int) AS id#x]
:                 +- Project [id#x]
:                    +- SubqueryAlias t
:                       +- LocalRelation [id#x]
+- Project [j#x]
   +- Filter (j#x = scalar-subquery#x [])
      :  +- Aggregate [max(j#x) AS max(j)#x]
      :     +- SubqueryAlias cte2
      :        +- SubqueryAlias cte1
      :           +- CTERelationRef xxxx, true, [j#x]
      +- SubqueryAlias cte1
         +- CTERelationRef xxxx, true, [j#x]


-- !query
create view va AS (with cte as (Select 1) select * from cte)
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`va`, (with cte as (Select 1) select * from cte), false, false, PersistedView, false, false, true
   +- Project [1#x]
      +- SubqueryAlias cte
         +- Project [1 AS 1#x]
            +- OneRowRelation


-- !query
select * from va
-- !query analysis
Project [1#x]
+- SubqueryAlias spark_catalog.default.va
   +- View (`spark_catalog`.`default`.`va`, [1#x])
      +- Project [cast(1#x as int) AS 1#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias cte
            :     +- Project [1 AS 1#x]
            :        +- OneRowRelation
            +- Project [1#x]
               +- SubqueryAlias cte
                  +- CTERelationRef xxxx, true, [1#x]


-- !query
with cte AS (SELECT * FROM va) SELECT * FROM cte
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias cte
:     +- Project [1#x]
:        +- SubqueryAlias spark_catalog.default.va
:           +- View (`spark_catalog`.`default`.`va`, [1#x])
:              +- Project [cast(1#x as int) AS 1#x]
:                 +- WithCTE
:                    :- CTERelationDef xxxx, false
:                    :  +- SubqueryAlias cte
:                    :     +- Project [1 AS 1#x]
:                    :        +- OneRowRelation
:                    +- Project [1#x]
:                       +- SubqueryAlias cte
:                          +- CTERelationRef xxxx, true, [1#x]
+- Project [1#x]
   +- SubqueryAlias cte
      +- CTERelationRef xxxx, true, [1#x]


-- !query
with cte as (select * from cte) select * from cte
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "TABLE_OR_VIEW_NOT_FOUND",
  "sqlState" : "42P01",
  "messageParameters" : {
    "relationName" : "`cte`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 28,
    "stopIndex" : 30,
    "fragment" : "cte"
  } ]
}


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
NoOpRunnableCommand$


-- !query
CREATE VIEW cte_view AS
WITH w1(c1) AS
 (WITH w2(c2) AS
  (WITH w3(c3) AS
   (WITH w4(c4) AS
    (WITH w5(c5) AS
     (WITH w6(c6) AS
      (WITH w7(c7) AS
       (WITH w8(c8) AS
        (SELECT 1)
        SELECT * FROM w8)
       SELECT * FROM w7)
      SELECT * FROM w6)
     SELECT * FROM w5)
    SELECT * FROM w4)
   SELECT * FROM w3)
  SELECT * FROM w2)
SELECT * FROM w1
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`cte_view`, WITH w1(c1) AS
 (WITH w2(c2) AS
  (WITH w3(c3) AS
   (WITH w4(c4) AS
    (WITH w5(c5) AS
     (WITH w6(c6) AS
      (WITH w7(c7) AS
       (WITH w8(c8) AS
        (SELECT 1)
        SELECT * FROM w8)
       SELECT * FROM w7)
      SELECT * FROM w6)
     SELECT * FROM w5)
    SELECT * FROM w4)
   SELECT * FROM w3)
  SELECT * FROM w2)
SELECT * FROM w1, false, false, PersistedView, false, false, true
   +- Project [c1#x]
      +- SubqueryAlias w1
         +- Project [c2#x AS c1#x]
            +- Project [c2#x]
               +- SubqueryAlias w2
                  +- Project [c3#x AS c2#x]
                     +- Project [c3#x]
                        +- SubqueryAlias w3
                           +- Project [c4#x AS c3#x]
                              +- Project [c4#x]
                                 +- SubqueryAlias w4
                                    +- Project [c5#x AS c4#x]
                                       +- Project [c5#x]
                                          +- SubqueryAlias w5
                                             +- Project [c6#x AS c5#x]
                                                +- Project [c6#x]
                                                   +- SubqueryAlias w6
                                                      +- Project [c7#x AS c6#x]
                                                         +- Project [c7#x]
                                                            +- SubqueryAlias w7
                                                               +- Project [c8#x AS c7#x]
                                                                  +- Project [c8#x]
                                                                     +- SubqueryAlias w8
                                                                        +- Project [1#x AS c8#x]
                                                                           +- Project [1 AS 1#x]
                                                                              +- OneRowRelation


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [c1#x]
+- SubqueryAlias spark_catalog.default.cte_view
   +- View (`spark_catalog`.`default`.`cte_view`, [c1#x])
      +- Project [cast(c1#x as int) AS c1#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias w8
            :     +- Project [1#x AS c8#x]
            :        +- Project [1 AS 1#x]
            :           +- OneRowRelation
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias w7
            :     +- Project [c8#x AS c7#x]
            :        +- Project [c8#x]
            :           +- SubqueryAlias w8
            :              +- CTERelationRef xxxx, true, [c8#x]
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias w6
            :     +- Project [c7#x AS c6#x]
            :        +- Project [c7#x]
            :           +- SubqueryAlias w7
            :              +- CTERelationRef xxxx, true, [c7#x]
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias w5
            :     +- Project [c6#x AS c5#x]
            :        +- Project [c6#x]
            :           +- SubqueryAlias w6
            :              +- CTERelationRef xxxx, true, [c6#x]
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias w4
            :     +- Project [c5#x AS c4#x]
            :        +- Project [c5#x]
            :           +- SubqueryAlias w5
            :              +- CTERelationRef xxxx, true, [c5#x]
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias w3
            :     +- Project [c4#x AS c3#x]
            :        +- Project [c4#x]
            :           +- SubqueryAlias w4
            :              +- CTERelationRef xxxx, true, [c4#x]
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias w2
            :     +- Project [c3#x AS c2#x]
            :        +- Project [c3#x]
            :           +- SubqueryAlias w3
            :              +- CTERelationRef xxxx, true, [c3#x]
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias w1
            :     +- Project [c2#x AS c1#x]
            :        +- Project [c2#x]
            :           +- SubqueryAlias w2
            :              +- CTERelationRef xxxx, true, [c2#x]
            +- Project [c1#x]
               +- SubqueryAlias w1
                  +- CTERelationRef xxxx, true, [c1#x]


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`cte_view`, true, true, false, false


-- !query
CREATE VIEW cte_view AS
WITH outermost(x) AS (
  SELECT 1
  UNION (WITH innermost as (SELECT 2)
         SELECT * FROM innermost
         UNION SELECT 3)
)
SELECT * FROM outermost ORDER BY 1
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`cte_view`, WITH outermost(x) AS (
  SELECT 1
  UNION (WITH innermost as (SELECT 2)
         SELECT * FROM innermost
         UNION SELECT 3)
)
SELECT * FROM outermost ORDER BY 1, false, false, PersistedView, false, false, true
   +- Sort [x#x ASC NULLS FIRST], true
      +- Project [x#x]
         +- SubqueryAlias outermost
            +- Project [1#x AS x#x]
               +- Distinct
                  +- Union false, false
                     :- Project [1 AS 1#x]
                     :  +- OneRowRelation
                     +- Distinct
                        +- Union false, false
                           :- Project [2#x]
                           :  +- SubqueryAlias innermost
                           :     +- Project [2 AS 2#x]
                           :        +- OneRowRelation
                           +- Project [3 AS 3#x]
                              +- OneRowRelation


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [x#x]
+- SubqueryAlias spark_catalog.default.cte_view
   +- View (`spark_catalog`.`default`.`cte_view`, [x#x])
      +- Project [cast(x#x as int) AS x#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias innermost
            :     +- Project [2 AS 2#x]
            :        +- OneRowRelation
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias outermost
            :     +- Project [1#x AS x#x]
            :        +- Distinct
            :           +- Union false, false
            :              :- Project [1 AS 1#x]
            :              :  +- OneRowRelation
            :              +- Distinct
            :                 +- Union false, false
            :                    :- Project [2#x]
            :                    :  +- SubqueryAlias innermost
            :                    :     +- CTERelationRef xxxx, true, [2#x]
            :                    +- Project [3 AS 3#x]
            :                       +- OneRowRelation
            +- Sort [x#x ASC NULLS FIRST], true
               +- Project [x#x]
                  +- SubqueryAlias outermost
                     +- CTERelationRef xxxx, true, [x#x]


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`cte_view`, true, true, false, false


-- !query
CREATE VIEW cte_view AS
WITH same_name AS (SELECT 42)
SELECT * FROM same_name, (SELECT 10) AS same_name
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`cte_view`, WITH same_name AS (SELECT 42)
SELECT * FROM same_name, (SELECT 10) AS same_name, false, false, PersistedView, false, false, true
   +- Project [42#x, 10#x]
      +- Join Inner
         :- SubqueryAlias same_name
         :  +- Project [42 AS 42#x]
         :     +- OneRowRelation
         +- SubqueryAlias same_name
            +- Project [10 AS 10#x]
               +- OneRowRelation


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [42#x, 10#x]
+- SubqueryAlias spark_catalog.default.cte_view
   +- View (`spark_catalog`.`default`.`cte_view`, [42#x,10#x])
      +- Project [cast(42#x as int) AS 42#x, cast(10#x as int) AS 10#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias same_name
            :     +- Project [42 AS 42#x]
            :        +- OneRowRelation
            +- Project [42#x, 10#x]
               +- Join Inner
                  :- SubqueryAlias same_name
                  :  +- CTERelationRef xxxx, true, [42#x]
                  +- SubqueryAlias same_name
                     +- Project [10 AS 10#x]
                        +- OneRowRelation


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`cte_view`, true, true, false, false


-- !query
CREATE VIEW cte_view AS
WITH q AS (SELECT 'foo' AS x)
SELECT x, typeof(x) as type_x FROM q
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`cte_view`, WITH q AS (SELECT 'foo' AS x)
SELECT x, typeof(x) as type_x FROM q, false, false, PersistedView, false, false, true
   +- Project [x#x, typeof(x#x) AS type_x#x]
      +- SubqueryAlias q
         +- Project [foo AS x#x]
            +- OneRowRelation


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [x#x, type_x#x]
+- SubqueryAlias spark_catalog.default.cte_view
   +- View (`spark_catalog`.`default`.`cte_view`, [x#x,type_x#x])
      +- Project [cast(x#x as string) AS x#x, cast(type_x#x as string) AS type_x#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias q
            :     +- Project [foo AS x#x]
            :        +- OneRowRelation
            +- Project [x#x, typeof(x#x) AS type_x#x]
               +- SubqueryAlias q
                  +- CTERelationRef xxxx, true, [x#x]


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`cte_view`, true, true, false, false


-- !query
CREATE VIEW cte_view AS
SELECT * FROM
  (WITH q AS (select 1 x) SELECT x+1 AS y FROM q)
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`cte_view`, SELECT * FROM
  (WITH q AS (select 1 x) SELECT x+1 AS y FROM q), false, false, PersistedView, false, false, true
   +- Project [y#x]
      +- SubqueryAlias __auto_generated_subquery_name
         +- Project [(x#x + 1) AS y#x]
            +- SubqueryAlias q
               +- Project [1 AS x#x]
                  +- OneRowRelation


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [y#x]
+- SubqueryAlias spark_catalog.default.cte_view
   +- View (`spark_catalog`.`default`.`cte_view`, [y#x])
      +- Project [cast(y#x as int) AS y#x]
         +- Project [y#x]
            +- SubqueryAlias __auto_generated_subquery_name
               +- WithCTE
                  :- CTERelationDef xxxx, false
                  :  +- SubqueryAlias q
                  :     +- Project [1 AS x#x]
                  :        +- OneRowRelation
                  +- Project [(x#x + 1) AS y#x]
                     +- SubqueryAlias q
                        +- CTERelationRef xxxx, true, [x#x]


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`cte_view`, true, true, false, false


-- !query
CREATE VIEW cte_view AS
select (with q as (select 1 x) select * from q) AS result
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`cte_view`, select (with q as (select 1 x) select * from q) AS result, false, false, PersistedView, false, false, true
   +- Project [scalar-subquery#x [] AS result#x]
      :  +- WithCTE
      :     :- CTERelationDef xxxx, false
      :     :  +- SubqueryAlias q
      :     :     +- Project [1 AS x#x]
      :     :        +- OneRowRelation
      :     +- Project [x#x]
      :        +- SubqueryAlias q
      :           +- CTERelationRef xxxx, true, [x#x]
      +- OneRowRelation


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [result#x]
+- SubqueryAlias spark_catalog.default.cte_view
   +- View (`spark_catalog`.`default`.`cte_view`, [result#x])
      +- Project [cast(result#x as int) AS result#x]
         +- Project [scalar-subquery#x [] AS result#x]
            :  +- WithCTE
            :     :- CTERelationDef xxxx, false
            :     :  +- SubqueryAlias q
            :     :     +- Project [1 AS x#x]
            :     :        +- OneRowRelation
            :     +- Project [x#x]
            :        +- SubqueryAlias q
            :           +- CTERelationRef xxxx, true, [x#x]
            +- OneRowRelation


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`cte_view`, true, true, false, false


-- !query
CREATE VIEW cte_view AS
select 1 in (with q as (select 1) select * from q) AS result
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`cte_view`, select 1 in (with q as (select 1) select * from q) AS result, false, false, PersistedView, false, false, true
   +- Project [1 IN (list#x []) AS result#x]
      :  +- WithCTE
      :     :- CTERelationDef xxxx, false
      :     :  +- SubqueryAlias q
      :     :     +- Project [1 AS 1#x]
      :     :        +- OneRowRelation
      :     +- Project [1#x]
      :        +- SubqueryAlias q
      :           +- CTERelationRef xxxx, true, [1#x]
      +- OneRowRelation


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [result#x]
+- SubqueryAlias spark_catalog.default.cte_view
   +- View (`spark_catalog`.`default`.`cte_view`, [result#x])
      +- Project [cast(result#x as boolean) AS result#x]
         +- Project [1 IN (list#x []) AS result#x]
            :  +- WithCTE
            :     :- CTERelationDef xxxx, false
            :     :  +- SubqueryAlias q
            :     :     +- Project [1 AS 1#x]
            :     :        +- OneRowRelation
            :     +- Project [1#x]
            :        +- SubqueryAlias q
            :           +- CTERelationRef xxxx, true, [1#x]
            +- OneRowRelation


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`cte_view`, true, true, false, false


-- !query
CREATE VIEW cte_view AS
WITH q1 as (select 1 x)
select * from
  (with q2 as (select * from q1) select * from q2) AS result
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`cte_view`, WITH q1 as (select 1 x)
select * from
  (with q2 as (select * from q1) select * from q2) AS result, false, false, PersistedView, false, false, true
   +- Project [x#x]
      +- SubqueryAlias result
         +- Project [x#x]
            +- SubqueryAlias q2
               +- Project [x#x]
                  +- SubqueryAlias q1
                     +- Project [1 AS x#x]
                        +- OneRowRelation


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [x#x]
+- SubqueryAlias spark_catalog.default.cte_view
   +- View (`spark_catalog`.`default`.`cte_view`, [x#x])
      +- Project [cast(x#x as int) AS x#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias q1
            :     +- Project [1 AS x#x]
            :        +- OneRowRelation
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias q2
            :     +- Project [x#x]
            :        +- SubqueryAlias q1
            :           +- CTERelationRef xxxx, true, [x#x]
            +- Project [x#x]
               +- SubqueryAlias result
                  +- Project [x#x]
                     +- SubqueryAlias q2
                        +- CTERelationRef xxxx, true, [x#x]


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`cte_view`, true, true, false, false


-- !query
CREATE VIEW cte_view AS
WITH q1 as (select 1 x)
select * from
  (with q1 as (select x+1 as x from q1) select * from q1) AS result
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`cte_view`, WITH q1 as (select 1 x)
select * from
  (with q1 as (select x+1 as x from q1) select * from q1) AS result, false, false, PersistedView, false, false, true
   +- Project [x#x]
      +- SubqueryAlias result
         +- Project [x#x]
            +- SubqueryAlias q1
               +- Project [(x#x + 1) AS x#x]
                  +- SubqueryAlias q1
                     +- Project [1 AS x#x]
                        +- OneRowRelation


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [x#x]
+- SubqueryAlias spark_catalog.default.cte_view
   +- View (`spark_catalog`.`default`.`cte_view`, [x#x])
      +- Project [cast(x#x as int) AS x#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias q1
            :     +- Project [1 AS x#x]
            :        +- OneRowRelation
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias q1
            :     +- Project [(x#x + 1) AS x#x]
            :        +- SubqueryAlias q1
            :           +- CTERelationRef xxxx, true, [x#x]
            +- Project [x#x]
               +- SubqueryAlias result
                  +- Project [x#x]
                     +- SubqueryAlias q1
                        +- CTERelationRef xxxx, true, [x#x]


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`cte_view`, true, true, false, false


-- !query
CREATE VIEW cte_view AS
WITH T1 as (select 1 a)
select *
from
  T1 x,
  (WITH T1 as (select 2 b) select * from T1) y,
  T1 z
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLUMN_ALREADY_EXISTS",
  "sqlState" : "42711",
  "messageParameters" : {
    "columnName" : "`a`"
  }
}


-- !query
SELECT * FROM cte_view
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "TABLE_OR_VIEW_NOT_FOUND",
  "sqlState" : "42P01",
  "messageParameters" : {
    "relationName" : "`cte_view`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 15,
    "stopIndex" : 22,
    "fragment" : "cte_view"
  } ]
}


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
NoOpRunnableCommand$


-- !query
CREATE VIEW cte_view AS
select
  (WITH q AS (select T.x) select * from q) AS result
from (select 1 x, 2 y) T
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`cte_view`, select
  (WITH q AS (select T.x) select * from q) AS result
from (select 1 x, 2 y) T, false, false, PersistedView, false, false, true
   +- Project [scalar-subquery#x [x#x] AS result#x]
      :  +- WithCTE
      :     :- CTERelationDef xxxx, false
      :     :  +- SubqueryAlias q
      :     :     +- Project [outer(x#x)]
      :     :        +- OneRowRelation
      :     +- Project [x#x]
      :        +- SubqueryAlias q
      :           +- CTERelationRef xxxx, true, [x#x]
      +- SubqueryAlias T
         +- Project [1 AS x#x, 2 AS y#x]
            +- OneRowRelation


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [result#x]
+- SubqueryAlias spark_catalog.default.cte_view
   +- View (`spark_catalog`.`default`.`cte_view`, [result#x])
      +- Project [cast(result#x as int) AS result#x]
         +- Project [scalar-subquery#x [x#x] AS result#x]
            :  +- WithCTE
            :     :- CTERelationDef xxxx, false
            :     :  +- SubqueryAlias q
            :     :     +- Project [outer(x#x)]
            :     :        +- OneRowRelation
            :     +- Project [x#x]
            :        +- SubqueryAlias q
            :           +- CTERelationRef xxxx, true, [x#x]
            +- SubqueryAlias T
               +- Project [1 AS x#x, 2 AS y#x]
                  +- OneRowRelation


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`cte_view`, true, true, false, false


-- !query
CREATE temporary VIEW cte_view AS
with cte1 as (Select id as j from t)
select * from cte1 where j = (select max(j) from cte1 as cte2)
-- !query analysis
CreateViewCommand `cte_view`, with cte1 as (Select id as j from t)
select * from cte1 where j = (select max(j) from cte1 as cte2), false, false, LocalTempView, false, false, true
   +- Project [j#x]
      +- Filter (j#x = scalar-subquery#x [])
         :  +- Aggregate [max(j#x) AS max(j)#x]
         :     +- SubqueryAlias cte2
         :        +- SubqueryAlias cte1
         :           +- Project [id#x AS j#x]
         :              +- SubqueryAlias t
         :                 +- View (`t`, [id#x])
         :                    +- Project [cast(id#x as int) AS id#x]
         :                       +- Project [id#x]
         :                          +- SubqueryAlias t
         :                             +- LocalRelation [id#x]
         +- SubqueryAlias cte1
            +- Project [id#x AS j#x]
               +- SubqueryAlias t
                  +- View (`t`, [id#x])
                     +- Project [cast(id#x as int) AS id#x]
                        +- Project [id#x]
                           +- SubqueryAlias t
                              +- LocalRelation [id#x]


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [j#x]
+- SubqueryAlias cte_view
   +- View (`cte_view`, [j#x])
      +- Project [cast(j#x as int) AS j#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias cte1
            :     +- Project [id#x AS j#x]
            :        +- SubqueryAlias t
            :           +- View (`t`, [id#x])
            :              +- Project [cast(id#x as int) AS id#x]
            :                 +- Project [id#x]
            :                    +- SubqueryAlias t
            :                       +- LocalRelation [id#x]
            +- Project [j#x]
               +- Filter (j#x = scalar-subquery#x [])
                  :  +- Aggregate [max(j#x) AS max(j)#x]
                  :     +- SubqueryAlias cte2
                  :        +- SubqueryAlias cte1
                  :           +- CTERelationRef xxxx, true, [j#x]
                  +- SubqueryAlias cte1
                     +- CTERelationRef xxxx, true, [j#x]


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTempViewCommand cte_view


-- !query
CREATE VIEW cte_view AS
with cte AS (SELECT * FROM va) SELECT * FROM cte
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`cte_view`, with cte AS (SELECT * FROM va) SELECT * FROM cte, false, false, PersistedView, false, false, true
   +- Project [1#x]
      +- SubqueryAlias cte
         +- Project [1#x]
            +- SubqueryAlias spark_catalog.default.va
               +- View (`spark_catalog`.`default`.`va`, [1#x])
                  +- Project [cast(1#x as int) AS 1#x]
                     +- WithCTE
                        :- CTERelationDef xxxx, false
                        :  +- SubqueryAlias cte
                        :     +- Project [1 AS 1#x]
                        :        +- OneRowRelation
                        +- Project [1#x]
                           +- SubqueryAlias cte
                              +- CTERelationRef xxxx, true, [1#x]


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [1#x]
+- SubqueryAlias spark_catalog.default.cte_view
   +- View (`spark_catalog`.`default`.`cte_view`, [1#x])
      +- Project [cast(1#x as int) AS 1#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias cte
            :     +- Project [1#x]
            :        +- SubqueryAlias spark_catalog.default.va
            :           +- View (`spark_catalog`.`default`.`va`, [1#x])
            :              +- Project [cast(1#x as int) AS 1#x]
            :                 +- WithCTE
            :                    :- CTERelationDef xxxx, false
            :                    :  +- SubqueryAlias cte
            :                    :     +- Project [1 AS 1#x]
            :                    :        +- OneRowRelation
            :                    +- Project [1#x]
            :                       +- SubqueryAlias cte
            :                          +- CTERelationRef xxxx, true, [1#x]
            +- Project [1#x]
               +- SubqueryAlias cte
                  +- CTERelationRef xxxx, true, [1#x]


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`cte_view`, true, true, false, false


-- !query
CREATE temporary VIEW cte_view AS
WITH t AS (SELECT 1 FROM t) SELECT * FROM t
-- !query analysis
CreateViewCommand `cte_view`, WITH t AS (SELECT 1 FROM t) SELECT * FROM t, false, false, LocalTempView, false, false, true
   +- Project [1#x]
      +- SubqueryAlias t
         +- Project [1 AS 1#x]
            +- SubqueryAlias t
               +- View (`t`, [id#x])
                  +- Project [cast(id#x as int) AS id#x]
                     +- Project [id#x]
                        +- SubqueryAlias t
                           +- LocalRelation [id#x]


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [1#x]
+- SubqueryAlias cte_view
   +- View (`cte_view`, [1#x])
      +- Project [cast(1#x as int) AS 1#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias t
            :     +- Project [1 AS 1#x]
            :        +- SubqueryAlias t
            :           +- View (`t`, [id#x])
            :              +- Project [cast(id#x as int) AS id#x]
            :                 +- Project [id#x]
            :                    +- SubqueryAlias t
            :                       +- LocalRelation [id#x]
            +- Project [1#x]
               +- SubqueryAlias t
                  +- CTERelationRef xxxx, true, [1#x]


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTempViewCommand cte_view


-- !query
CREATE temporary VIEW cte_view AS
WITH t1 AS (SELECT * FROM t2), t2 AS (SELECT 2 FROM t1) SELECT * FROM t1 cross join t2
-- !query analysis
CreateViewCommand `cte_view`, WITH t1 AS (SELECT * FROM t2), t2 AS (SELECT 2 FROM t1) SELECT * FROM t1 cross join t2, false, false, LocalTempView, false, false, true
   +- Project [id#x, 2#x]
      +- Join Cross
         :- SubqueryAlias t1
         :  +- Project [id#x]
         :     +- SubqueryAlias t2
         :        +- View (`t2`, [id#x])
         :           +- Project [cast(id#x as int) AS id#x]
         :              +- Project [id#x]
         :                 +- SubqueryAlias t
         :                    +- LocalRelation [id#x]
         +- SubqueryAlias t2
            +- Project [2 AS 2#x]
               +- SubqueryAlias t1
                  +- Project [id#x]
                     +- SubqueryAlias t2
                        +- View (`t2`, [id#x])
                           +- Project [cast(id#x as int) AS id#x]
                              +- Project [id#x]
                                 +- SubqueryAlias t
                                    +- LocalRelation [id#x]


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [id#x, 2#x]
+- SubqueryAlias cte_view
   +- View (`cte_view`, [id#x,2#x])
      +- Project [cast(id#x as int) AS id#x, cast(2#x as int) AS 2#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias t1
            :     +- Project [id#x]
            :        +- SubqueryAlias t2
            :           +- View (`t2`, [id#x])
            :              +- Project [cast(id#x as int) AS id#x]
            :                 +- Project [id#x]
            :                    +- SubqueryAlias t
            :                       +- LocalRelation [id#x]
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias t2
            :     +- Project [2 AS 2#x]
            :        +- SubqueryAlias t1
            :           +- CTERelationRef xxxx, true, [id#x]
            +- Project [id#x, 2#x]
               +- Join Cross
                  :- SubqueryAlias t1
                  :  +- CTERelationRef xxxx, true, [id#x]
                  +- SubqueryAlias t2
                     +- CTERelationRef xxxx, true, [2#x]


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTempViewCommand cte_view


-- !query
CREATE temporary VIEW cte_view AS
WITH CTE1 AS (
  SELECT b.id AS id
  FROM   T2 a
         CROSS JOIN (SELECT id AS id FROM T2) b
)
SELECT t1.id AS c1,
       t2.id AS c2
FROM   CTE1 t1
       CROSS JOIN CTE1 t2
-- !query analysis
CreateViewCommand `cte_view`, WITH CTE1 AS (
  SELECT b.id AS id
  FROM   T2 a
         CROSS JOIN (SELECT id AS id FROM T2) b
)
SELECT t1.id AS c1,
       t2.id AS c2
FROM   CTE1 t1
       CROSS JOIN CTE1 t2, false, false, LocalTempView, false, false, true
   +- Project [id#x AS c1#x, id#x AS c2#x]
      +- Join Cross
         :- SubqueryAlias t1
         :  +- SubqueryAlias CTE1
         :     +- Project [id#x AS id#x]
         :        +- Join Cross
         :           :- SubqueryAlias a
         :           :  +- SubqueryAlias t2
         :           :     +- View (`t2`, [id#x])
         :           :        +- Project [cast(id#x as int) AS id#x]
         :           :           +- Project [id#x]
         :           :              +- SubqueryAlias t
         :           :                 +- LocalRelation [id#x]
         :           +- SubqueryAlias b
         :              +- Project [id#x AS id#x]
         :                 +- SubqueryAlias t2
         :                    +- View (`t2`, [id#x])
         :                       +- Project [cast(id#x as int) AS id#x]
         :                          +- Project [id#x]
         :                             +- SubqueryAlias t
         :                                +- LocalRelation [id#x]
         +- SubqueryAlias t2
            +- SubqueryAlias CTE1
               +- Project [id#x AS id#x]
                  +- Join Cross
                     :- SubqueryAlias a
                     :  +- SubqueryAlias t2
                     :     +- View (`t2`, [id#x])
                     :        +- Project [cast(id#x as int) AS id#x]
                     :           +- Project [id#x]
                     :              +- SubqueryAlias t
                     :                 +- LocalRelation [id#x]
                     +- SubqueryAlias b
                        +- Project [id#x AS id#x]
                           +- SubqueryAlias t2
                              +- View (`t2`, [id#x])
                                 +- Project [cast(id#x as int) AS id#x]
                                    +- Project [id#x]
                                       +- SubqueryAlias t
                                          +- LocalRelation [id#x]


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [c1#x, c2#x]
+- SubqueryAlias cte_view
   +- View (`cte_view`, [c1#x,c2#x])
      +- Project [cast(c1#x as int) AS c1#x, cast(c2#x as int) AS c2#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias CTE1
            :     +- Project [id#x AS id#x]
            :        +- Join Cross
            :           :- SubqueryAlias a
            :           :  +- SubqueryAlias t2
            :           :     +- View (`t2`, [id#x])
            :           :        +- Project [cast(id#x as int) AS id#x]
            :           :           +- Project [id#x]
            :           :              +- SubqueryAlias t
            :           :                 +- LocalRelation [id#x]
            :           +- SubqueryAlias b
            :              +- Project [id#x AS id#x]
            :                 +- SubqueryAlias t2
            :                    +- View (`t2`, [id#x])
            :                       +- Project [cast(id#x as int) AS id#x]
            :                          +- Project [id#x]
            :                             +- SubqueryAlias t
            :                                +- LocalRelation [id#x]
            +- Project [id#x AS c1#x, id#x AS c2#x]
               +- Join Cross
                  :- SubqueryAlias t1
                  :  +- SubqueryAlias CTE1
                  :     +- CTERelationRef xxxx, true, [id#x]
                  +- SubqueryAlias t2
                     +- SubqueryAlias CTE1
                        +- CTERelationRef xxxx, true, [id#x]


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTempViewCommand cte_view


-- !query
CREATE temporary VIEW cte_view AS
WITH t(x) AS (SELECT 1)
SELECT * FROM t WHERE x = 1
-- !query analysis
CreateViewCommand `cte_view`, WITH t(x) AS (SELECT 1)
SELECT * FROM t WHERE x = 1, false, false, LocalTempView, false, false, true
   +- Project [x#x]
      +- Filter (x#x = 1)
         +- SubqueryAlias t
            +- Project [1#x AS x#x]
               +- Project [1 AS 1#x]
                  +- OneRowRelation


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [x#x]
+- SubqueryAlias cte_view
   +- View (`cte_view`, [x#x])
      +- Project [cast(x#x as int) AS x#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias t
            :     +- Project [1#x AS x#x]
            :        +- Project [1 AS 1#x]
            :           +- OneRowRelation
            +- Project [x#x]
               +- Filter (x#x = 1)
                  +- SubqueryAlias t
                     +- CTERelationRef xxxx, true, [x#x]


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTempViewCommand cte_view


-- !query
CREATE temporary VIEW cte_view AS
WITH t(x, y) AS (SELECT 1, 2)
SELECT * FROM t WHERE x = 1 AND y = 2
-- !query analysis
CreateViewCommand `cte_view`, WITH t(x, y) AS (SELECT 1, 2)
SELECT * FROM t WHERE x = 1 AND y = 2, false, false, LocalTempView, false, false, true
   +- Project [x#x, y#x]
      +- Filter ((x#x = 1) AND (y#x = 2))
         +- SubqueryAlias t
            +- Project [1#x AS x#x, 2#x AS y#x]
               +- Project [1 AS 1#x, 2 AS 2#x]
                  +- OneRowRelation


-- !query
SELECT * FROM cte_view
-- !query analysis
Project [x#x, y#x]
+- SubqueryAlias cte_view
   +- View (`cte_view`, [x#x,y#x])
      +- Project [cast(x#x as int) AS x#x, cast(y#x as int) AS y#x]
         +- WithCTE
            :- CTERelationDef xxxx, false
            :  +- SubqueryAlias t
            :     +- Project [1#x AS x#x, 2#x AS y#x]
            :        +- Project [1 AS 1#x, 2 AS 2#x]
            :           +- OneRowRelation
            +- Project [x#x, y#x]
               +- Filter ((x#x = 1) AND (y#x = 2))
                  +- SubqueryAlias t
                     +- CTERelationRef xxxx, true, [x#x, y#x]


-- !query
DROP VIEW IF EXISTS cte_view
-- !query analysis
DropTempViewCommand cte_view


-- !query
DROP VIEW IF EXISTS t
-- !query analysis
DropTempViewCommand t


-- !query
DROP VIEW IF EXISTS t2
-- !query analysis
DropTempViewCommand t2


-- !query
DROP TABLE IF EXISTS m
-- !query analysis
NoOpRunnableCommand$


-- !query
DROP VIEW IF EXISTS va
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`va`, true, true, false, false
